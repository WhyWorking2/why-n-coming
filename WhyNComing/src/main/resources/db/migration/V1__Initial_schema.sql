CREATE EXTENSION IF NOT EXISTS pgcrypto;
SELECT gen_random_uuid();

CREATE SEQUENCE IF NOT EXISTS test_seq START WITH 1 INCREMENT BY 1 MINVALUE 1;

CREATE TABLE IF NOT EXISTS test (
    id           BIGINT PRIMARY KEY DEFAULT nextval('test_seq'),
    name         VARCHAR(100) NOT NULL,
    description  TEXT,
    created_at   TIMESTAMP NOT NULL DEFAULT now(),
    updated_at   TIMESTAMP NOT NULL DEFAULT now()
);

-- === Common function to auto-update modified_date ===
CREATE OR REPLACE FUNCTION set_modified_at()
RETURNS trigger AS $$
BEGIN
  NEW.modified_date := now();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TABLE IF NOT EXISTS public.users
(
    user_no integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    created_date timestamp(6) without time zone NOT NULL DEFAULT now(),
    deleted_date timestamp(6) without time zone,
    email character varying(100) COLLATE pg_catalog."default" NOT NULL,
    modified_date timestamp(6) without time zone NOT NULL DEFAULT now(),
    password character varying(255) COLLATE pg_catalog."default" NOT NULL,
    role character varying(255) COLLATE pg_catalog."default" NOT NULL,
    user_id character varying(36) COLLATE pg_catalog."default" NOT NULL,
    user_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    user_phone character varying(11) COLLATE pg_catalog."default" NOT NULL,
    created_by integer,
    modified_by integer,
    deleted_by integer,
    CONSTRAINT pk_users PRIMARY KEY (user_no),
    CONSTRAINT uq_users_user_phone UNIQUE (user_phone),
    CONSTRAINT uq_users_email UNIQUE (email),
    CONSTRAINT uq_users_user_id UNIQUE (user_id),
    CONSTRAINT ck_users_role CHECK (role IN ('CUSTOMER','OWNER','MANAGER','MASTER')),
    CONSTRAINT fk_users_created_by FOREIGN KEY (created_by)
    REFERENCES public.users (user_no) MATCH SIMPLE
                              ON UPDATE NO ACTION
                              ON DELETE NO ACTION,
    CONSTRAINT fk_users_modified_by FOREIGN KEY (modified_by)
    REFERENCES public.users (user_no) MATCH SIMPLE
                              ON UPDATE NO ACTION
                              ON DELETE NO ACTION,
    CONSTRAINT fk_users_deleted_by FOREIGN KEY (deleted_by)
    REFERENCES public.users (user_no) MATCH SIMPLE
                              ON UPDATE NO ACTION
                              ON DELETE NO ACTION
    )

    TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.users
    OWNER to "user";


CREATE TABLE IF NOT EXISTS public.stores
(
    store_id uuid NOT NULL DEFAULT gen_random_uuid(),
    created_date timestamp(6) without time zone NOT NULL DEFAULT now(),
    deleted_date timestamp(6) without time zone,
    delivery_address character varying(255) COLLATE pg_catalog."default",
    delivery_tip integer NOT NULL,
    min_delivery_price integer NOT NULL,
    modified_date timestamp(6) without time zone NOT NULL DEFAULT now(),
    operation_hours character varying(255) COLLATE pg_catalog."default",
    store_address character varying(255) COLLATE pg_catalog."default" NOT NULL,
    store_content character varying(255) COLLATE pg_catalog."default",
    store_logo_url text COLLATE pg_catalog."default",
    store_name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    store_phone character varying(20) COLLATE pg_catalog."default" NOT NULL,
    store_rating numeric(2,1) NOT NULL,
    store_review_count integer NOT NULL,
    created_by integer,
    modified_by integer,
    deleted_by integer,
    user_no integer NOT NULL,
    CONSTRAINT pk_stores PRIMARY KEY (store_id),
    CONSTRAINT uq_stores_store_phone UNIQUE (store_phone),
    -- FK 블록은 FOREIGN KEY -> REFERENCES가 연속되어야 함
    CONSTRAINT fk_stores_user_no FOREIGN KEY (user_no)
    REFERENCES public.users (user_no) MATCH SIMPLE
                              ON UPDATE NO ACTION
                              ON DELETE NO ACTION,
    CONSTRAINT fk_stores_created_by FOREIGN KEY (created_by)
    REFERENCES public.users (user_no) MATCH SIMPLE
                              ON UPDATE NO ACTION
                              ON DELETE NO ACTION,
    CONSTRAINT fk_stores_modified_by FOREIGN KEY (modified_by)
    REFERENCES public.users (user_no) MATCH SIMPLE
                              ON UPDATE NO ACTION
                              ON DELETE NO ACTION,
    CONSTRAINT fk_stores_deleted_by FOREIGN KEY (deleted_by)
    REFERENCES public.users (user_no) MATCH SIMPLE
                              ON UPDATE NO ACTION
                              ON DELETE NO ACTION,
    -- FK 블록 뒤에 CHECK 등 다른 제약을 콤마로 분리
    CONSTRAINT ck_stores_rating CHECK (store_rating BETWEEN 0.0 AND 5.0)
    )

    TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.stores
    OWNER to "user";

CREATE TABLE IF NOT EXISTS public.categories
(
    category_id uuid NOT NULL DEFAULT gen_random_uuid(),
    category_name character varying(20) COLLATE pg_catalog."default" NOT NULL,
    created_date timestamp(6) without time zone NOT NULL DEFAULT now(),
    deleted_date timestamp(6) without time zone,
    modified_date timestamp(6) without time zone NOT NULL DEFAULT now(),
    created_by integer,
    modified_by integer,
    deleted_by integer,
    CONSTRAINT pk_categories PRIMARY KEY (category_id),
    CONSTRAINT fk_categories_created_by FOREIGN KEY (created_by)
    REFERENCES public.users (user_no) MATCH SIMPLE
                              ON UPDATE NO ACTION
                              ON DELETE NO ACTION,
    CONSTRAINT fk_categories_modified_by FOREIGN KEY (modified_by)
    REFERENCES public.users (user_no) MATCH SIMPLE
                              ON UPDATE NO ACTION
                              ON DELETE NO ACTION,
    CONSTRAINT fk_categories_deleted_by FOREIGN KEY (deleted_by)
    REFERENCES public.users (user_no) MATCH SIMPLE
                              ON UPDATE NO ACTION
                              ON DELETE NO ACTION
    )

    TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.categories
    OWNER to "user";

CREATE TABLE IF NOT EXISTS public.products
(
    product_id uuid NOT NULL DEFAULT gen_random_uuid(),
    created_date timestamp(6) without time zone NOT NULL DEFAULT now(),
    deleted_date timestamp(6) without time zone,
    description character varying(255) COLLATE pg_catalog."default",
    modified_date timestamp(6) without time zone NOT NULL DEFAULT now(),
    price integer NOT NULL,
    product_name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    product_picture_url text COLLATE pg_catalog."default",
    store_id uuid NOT NULL,
    created_by integer,
    modified_by integer,
    deleted_by integer,
    CONSTRAINT pk_products PRIMARY KEY (product_id),
    CONSTRAINT fk_products_store_id FOREIGN KEY (store_id)
    REFERENCES public.stores (store_id) MATCH SIMPLE
                              ON UPDATE NO ACTION
                              ON DELETE NO ACTION,
    CONSTRAINT fk_products_created_by FOREIGN KEY (created_by)
    REFERENCES public.users (user_no) MATCH SIMPLE
                              ON UPDATE NO ACTION
                              ON DELETE NO ACTION,
    CONSTRAINT fk_products_modified_by FOREIGN KEY (modified_by)
    REFERENCES public.users (user_no) MATCH SIMPLE
                              ON UPDATE NO ACTION
                              ON DELETE NO ACTION,
    CONSTRAINT fk_products_deleted_by FOREIGN KEY (deleted_by)
    REFERENCES public.users (user_no) MATCH SIMPLE
                              ON UPDATE NO ACTION
                              ON DELETE NO ACTION
    )

    TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.products
    OWNER to "user";

CREATE TABLE IF NOT EXISTS public.orders
(
    order_id uuid NOT NULL DEFAULT gen_random_uuid(),
    created_date timestamp(6) without time zone NOT NULL DEFAULT now(),
    deleted_date timestamp(6) without time zone,
    modified_date timestamp(6) without time zone NOT NULL DEFAULT now(),
    payment_method character varying(255) COLLATE pg_catalog."default" NOT NULL,
    requests character varying(255) COLLATE pg_catalog."default",
    status character varying(255) COLLATE pg_catalog."default" NOT NULL,
    total_price integer NOT NULL,
    store_id uuid NOT NULL,
    user_no integer NOT NULL,
    created_by integer,
    modified_by integer,
    deleted_by integer,
    CONSTRAINT pk_orders PRIMARY KEY (order_id),
    CONSTRAINT fk_orders_user_no FOREIGN KEY (user_no)
    REFERENCES public.users (user_no) MATCH SIMPLE
                              ON UPDATE NO ACTION
                              ON DELETE NO ACTION,
    CONSTRAINT fk_orders_store_id FOREIGN KEY (store_id)
    REFERENCES public.stores (store_id) MATCH SIMPLE
                              ON UPDATE NO ACTION
                              ON DELETE NO ACTION,
    CONSTRAINT fk_orders_created_by FOREIGN KEY (created_by)
    REFERENCES public.users (user_no) MATCH SIMPLE
                              ON UPDATE NO ACTION
                              ON DELETE NO ACTION,
    CONSTRAINT fk_orders_modified_by FOREIGN KEY (modified_by)
    REFERENCES public.users (user_no) MATCH SIMPLE
                              ON UPDATE NO ACTION
                              ON DELETE NO ACTION,
    CONSTRAINT fk_orders_deleted_by FOREIGN KEY (deleted_by)
    REFERENCES public.users (user_no) MATCH SIMPLE
                              ON UPDATE NO ACTION
                              ON DELETE NO ACTION,
    CONSTRAINT ck_orders_status CHECK (status::text = ANY (ARRAY['SUCCESS'::character varying, 'CANCELED'::character varying, 'REFUNDED'::character varying]::text[]))
    )

    TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.orders
    OWNER to "user";

CREATE TABLE IF NOT EXISTS public.addresses
(
    address_id uuid NOT NULL DEFAULT gen_random_uuid(),
    address character varying(255) COLLATE pg_catalog."default" NOT NULL,
    created_date timestamp(6) without time zone NOT NULL DEFAULT now(),
    deleted_date timestamp(6) without time zone,
    modified_date timestamp(6) without time zone NOT NULL DEFAULT now(),
    representative_yn character varying(1) COLLATE pg_catalog."default",
    user_no integer,
    created_by integer,
    modified_by integer,
    deleted_by integer,
    CONSTRAINT pk_addresses PRIMARY KEY (address_id),
    CONSTRAINT fk_addresses_user_no FOREIGN KEY (user_no)
    REFERENCES public.users (user_no) MATCH SIMPLE
                              ON UPDATE NO ACTION
                              ON DELETE NO ACTION,
    CONSTRAINT fk_addresses_created_by FOREIGN KEY (created_by)
    REFERENCES public.users (user_no) MATCH SIMPLE
                              ON UPDATE NO ACTION
                              ON DELETE NO ACTION,
    CONSTRAINT fk_addresses_modified_by FOREIGN KEY (modified_by)
    REFERENCES public.users (user_no) MATCH SIMPLE
                              ON UPDATE NO ACTION
                              ON DELETE NO ACTION,
    CONSTRAINT fk_addresses_deleted_by FOREIGN KEY (deleted_by)
    REFERENCES public.users (user_no) MATCH SIMPLE
                              ON UPDATE NO ACTION
                              ON DELETE NO ACTION
    )

    TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.addresses
    OWNER to "user";

CREATE TABLE IF NOT EXISTS public.deliveries
(
    delivery_id uuid NOT NULL DEFAULT gen_random_uuid(),
    created_date timestamp(6) without time zone NOT NULL DEFAULT now(),
    deleted_date timestamp(6) without time zone,
    delivery_status character varying(255) COLLATE pg_catalog."default" NOT NULL,
    modified_date timestamp(6) without time zone NOT NULL DEFAULT now(),
    delivery_position character varying(255) COLLATE pg_catalog."default" NOT NULL,
    address_id uuid NOT NULL,
    order_id uuid NOT NULL,
    user_no integer NOT NULL,
    created_by integer,
    modified_by integer,
    deleted_by integer,
    CONSTRAINT pk_deliveries PRIMARY KEY (delivery_id),
    CONSTRAINT uq_deliveries_order_id UNIQUE (order_id),
    CONSTRAINT fk_deliveries_user_no FOREIGN KEY (user_no)
    REFERENCES public.users (user_no) MATCH SIMPLE
                              ON UPDATE NO ACTION
                              ON DELETE NO ACTION,
    CONSTRAINT fk_deliveries_order_id FOREIGN KEY (order_id)
    REFERENCES public.orders (order_id) MATCH SIMPLE
                              ON UPDATE NO ACTION
                              ON DELETE NO ACTION,
    CONSTRAINT fk_deliveries_address_id FOREIGN KEY (address_id)
    REFERENCES public.addresses (address_id) MATCH SIMPLE
                              ON UPDATE NO ACTION
                              ON DELETE NO ACTION,
    CONSTRAINT fk_deliveries_created_by FOREIGN KEY (created_by)
    REFERENCES public.users (user_no) MATCH SIMPLE
                              ON UPDATE NO ACTION
                              ON DELETE NO ACTION,
    CONSTRAINT fk_deliveries_modified_by FOREIGN KEY (modified_by)
    REFERENCES public.users (user_no) MATCH SIMPLE
                              ON UPDATE NO ACTION
                              ON DELETE NO ACTION,
    CONSTRAINT fk_deliveries_deleted_by FOREIGN KEY (deleted_by)
    REFERENCES public.users (user_no) MATCH SIMPLE
                              ON UPDATE NO ACTION
                              ON DELETE NO ACTION,
    CONSTRAINT ck_deliveries_delivery_status CHECK (delivery_status::text = ANY (ARRAY['ACCEPTED'::character varying, 'COOKED'::character varying, 'DELIVERING'::character varying, 'DELIVERED'::character varying]::text[]))
    )

    TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.deliveries
    OWNER to "user";

CREATE TABLE IF NOT EXISTS public.reviews
(
    review_id uuid NOT NULL DEFAULT gen_random_uuid(),
    created_date timestamp(6) without time zone NOT NULL DEFAULT now(),
    deleted_date timestamp(6) without time zone,
    modified_date timestamp(6) without time zone NOT NULL DEFAULT now(),
    review_content character varying(255) COLLATE pg_catalog."default",
    review_picture_url text COLLATE pg_catalog."default",
    review_rating integer NOT NULL,
    order_id uuid NOT NULL,
    store_id uuid NOT NULL,
    user_no integer NOT NULL,
    created_by integer,
    modified_by integer,
    deleted_by integer,
    CONSTRAINT pk_reviews PRIMARY KEY (review_id),
    CONSTRAINT uq_reviews_order_id UNIQUE (order_id),
    CONSTRAINT fk_reviews_order_id FOREIGN KEY (order_id)
    REFERENCES public.orders (order_id) MATCH SIMPLE
                              ON UPDATE NO ACTION
                              ON DELETE NO ACTION,
    CONSTRAINT fk_reviews_store_id FOREIGN KEY (store_id)
    REFERENCES public.stores (store_id) MATCH SIMPLE
                              ON UPDATE NO ACTION
                              ON DELETE NO ACTION,
    CONSTRAINT fk_reviews_user_no FOREIGN KEY (user_no)
    REFERENCES public.users (user_no) MATCH SIMPLE
                              ON UPDATE NO ACTION
                              ON DELETE NO ACTION,
    CONSTRAINT fk_reviews_created_by FOREIGN KEY (created_by)
    REFERENCES public.users (user_no) MATCH SIMPLE
                              ON UPDATE NO ACTION
                              ON DELETE NO ACTION,
    CONSTRAINT fk_reviews_modified_by FOREIGN KEY (modified_by)
    REFERENCES public.users (user_no) MATCH SIMPLE
                              ON UPDATE NO ACTION
                              ON DELETE NO ACTION,
    CONSTRAINT fk_reviews_deleted_by FOREIGN KEY (deleted_by)
    REFERENCES public.users (user_no) MATCH SIMPLE
                              ON UPDATE NO ACTION
                              ON DELETE NO ACTION
    )

    TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.reviews
    OWNER to "user";

CREATE TABLE IF NOT EXISTS public.owner_reviews
(
    owner_review_id uuid NOT NULL DEFAULT gen_random_uuid(),
    created_date timestamp(6) without time zone NOT NULL DEFAULT now(),
    deleted_date timestamp(6) without time zone,
    modified_date timestamp(6) without time zone NOT NULL DEFAULT now(),
    owner_review_content character varying(255) COLLATE pg_catalog."default",
    review_id uuid NOT NULL,
    user_no integer NOT NULL,
    created_by integer,
    modified_by integer,
    deleted_by integer,
    CONSTRAINT pk_owner_reviews PRIMARY KEY (owner_review_id),
    CONSTRAINT uq_owner_reviews_review_id UNIQUE (review_id),
    CONSTRAINT fk_owner_reviews_user_no FOREIGN KEY (user_no)
    REFERENCES public.users (user_no) MATCH SIMPLE
                              ON UPDATE NO ACTION
                              ON DELETE NO ACTION,
    CONSTRAINT fk_owner_reviews_review_id FOREIGN KEY (review_id)
    REFERENCES public.reviews (review_id) MATCH SIMPLE
                              ON UPDATE NO ACTION
                              ON DELETE NO ACTION,
    CONSTRAINT fk_owner_reviews_created_by FOREIGN KEY (created_by)
    REFERENCES public.users (user_no) MATCH SIMPLE
                              ON UPDATE NO ACTION
                              ON DELETE NO ACTION,
    CONSTRAINT fk_owner_reviews_modified_by FOREIGN KEY (modified_by)
    REFERENCES public.users (user_no) MATCH SIMPLE
                              ON UPDATE NO ACTION
                              ON DELETE NO ACTION,
    CONSTRAINT fk_owner_reviews_deleted_by FOREIGN KEY (deleted_by)
    REFERENCES public.users (user_no) MATCH SIMPLE
                              ON UPDATE NO ACTION
                              ON DELETE NO ACTION
    )

    TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.owner_reviews
    OWNER to "user";

CREATE TABLE IF NOT EXISTS public.carts
(
    cart_id uuid NOT NULL DEFAULT gen_random_uuid(),
    created_date timestamp(6) without time zone NOT NULL DEFAULT now(),
    deleted_date timestamp(6) without time zone,
    modified_date timestamp(6) without time zone NOT NULL DEFAULT now(),
    quantity integer NOT NULL,
    order_id uuid,
    product_id uuid NOT NULL,
    store_id uuid NOT NULL,
    user_no integer NOT NULL,
    created_by integer,
    modified_by integer,
    deleted_by integer,
    CONSTRAINT pk_carts PRIMARY KEY (cart_id),
    CONSTRAINT fk_carts_store_id FOREIGN KEY (store_id)
    REFERENCES public.stores (store_id) MATCH SIMPLE
                              ON UPDATE NO ACTION
                              ON DELETE NO ACTION,
    CONSTRAINT fk_carts_order_id FOREIGN KEY (order_id)
    REFERENCES public.orders (order_id) MATCH SIMPLE
                              ON UPDATE NO ACTION
                              ON DELETE NO ACTION,
    CONSTRAINT fk_carts_user_no FOREIGN KEY (user_no)
    REFERENCES public.users (user_no) MATCH SIMPLE
                              ON UPDATE NO ACTION
                              ON DELETE NO ACTION,
    CONSTRAINT fk_carts_product_id FOREIGN KEY (product_id)
    REFERENCES public.products (product_id) MATCH SIMPLE
                              ON UPDATE NO ACTION
                              ON DELETE NO ACTION,
    CONSTRAINT fk_carts_created_by FOREIGN KEY (created_by)
    REFERENCES public.users (user_no) MATCH SIMPLE
                              ON UPDATE NO ACTION
                              ON DELETE NO ACTION,
    CONSTRAINT fk_carts_modified_by FOREIGN KEY (modified_by)
    REFERENCES public.users (user_no) MATCH SIMPLE
                              ON UPDATE NO ACTION
                              ON DELETE NO ACTION,
    CONSTRAINT fk_carts_deleted_by FOREIGN KEY (deleted_by)
    REFERENCES public.users (user_no) MATCH SIMPLE
                              ON UPDATE NO ACTION
                              ON DELETE NO ACTION
    )

    TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.carts
    OWNER to "user";

CREATE TABLE IF NOT EXISTS public.category_products
(
    category_product_id uuid NOT NULL DEFAULT gen_random_uuid(),
    created_date timestamp(6) without time zone NOT NULL DEFAULT now(),
    deleted_date timestamp(6) without time zone,
    modified_date timestamp(6) without time zone NOT NULL DEFAULT now(),
    category_id uuid NOT NULL,
    product_id uuid NOT NULL,
    created_by integer,
    modified_by integer,
    deleted_by integer,
    CONSTRAINT pk_category_products PRIMARY KEY (category_product_id),
    CONSTRAINT fk_category_products_product_id FOREIGN KEY (product_id)
    REFERENCES public.products (product_id) MATCH SIMPLE
                              ON UPDATE NO ACTION
                              ON DELETE NO ACTION,
    CONSTRAINT fk_category_products_category_id FOREIGN KEY (category_id)
    REFERENCES public.categories (category_id) MATCH SIMPLE
                              ON UPDATE NO ACTION
                              ON DELETE NO ACTION,
    CONSTRAINT fk_category_products_created_by FOREIGN KEY (created_by)
    REFERENCES public.users (user_no) MATCH SIMPLE
                              ON UPDATE NO ACTION
                              ON DELETE NO ACTION,
    CONSTRAINT fk_category_products_modified_by FOREIGN KEY (modified_by)
    REFERENCES public.users (user_no) MATCH SIMPLE
                              ON UPDATE NO ACTION
                              ON DELETE NO ACTION,
    CONSTRAINT fk_category_products_deleted_by FOREIGN KEY (deleted_by)
    REFERENCES public.users (user_no) MATCH SIMPLE
                              ON UPDATE NO ACTION
                              ON DELETE NO ACTION
    )

    TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.category_products
    OWNER to "user";

CREATE TABLE IF NOT EXISTS public.category_stores
(
    category_store_id uuid NOT NULL DEFAULT gen_random_uuid(),
    created_date timestamp(6) without time zone NOT NULL DEFAULT now(),
    deleted_date timestamp(6) without time zone,
    modified_date timestamp(6) without time zone NOT NULL DEFAULT now(),
    category_id uuid NOT NULL,
    store_id uuid NOT NULL,
    created_by integer,
    modified_by integer,
    deleted_by integer,
    CONSTRAINT pk_category_stores PRIMARY KEY (category_store_id),
    CONSTRAINT fk_category_stores_category_id FOREIGN KEY (category_id)
    REFERENCES public.categories (category_id) MATCH SIMPLE
                              ON UPDATE NO ACTION
                              ON DELETE NO ACTION,
    CONSTRAINT fk_category_stores_store_id FOREIGN KEY (store_id)
    REFERENCES public.stores (store_id) MATCH SIMPLE
                              ON UPDATE NO ACTION
                              ON DELETE NO ACTION,
    CONSTRAINT fk_category_stores_created_by FOREIGN KEY (created_by)
    REFERENCES public.users (user_no) MATCH SIMPLE
                              ON UPDATE NO ACTION
                              ON DELETE NO ACTION,
    CONSTRAINT fk_category_stores_modified_by FOREIGN KEY (modified_by)
    REFERENCES public.users (user_no) MATCH SIMPLE
                              ON UPDATE NO ACTION
                              ON DELETE NO ACTION,
    CONSTRAINT fk_category_stores_deleted_by FOREIGN KEY (deleted_by)
    REFERENCES public.users (user_no) MATCH SIMPLE
                              ON UPDATE NO ACTION
                              ON DELETE NO ACTION
    )

    TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.category_stores
    OWNER to "user";

CREATE TABLE IF NOT EXISTS public.store_images
(
    store_image_id uuid NOT NULL DEFAULT gen_random_uuid(),
    created_date timestamp(6) without time zone NOT NULL DEFAULT now(),
    deleted_date timestamp(6) without time zone,
    modified_date timestamp(6) without time zone NOT NULL DEFAULT now(),
    store_image_url text COLLATE pg_catalog."default" NOT NULL,
    store_id uuid NOT NULL,
    created_by integer,
    modified_by integer,
    deleted_by integer,
    CONSTRAINT pk_store_image PRIMARY KEY (store_image_id),
    CONSTRAINT fk_store_images_store_id FOREIGN KEY (store_id)
    REFERENCES public.stores (store_id) MATCH SIMPLE
                              ON UPDATE NO ACTION
                              ON DELETE NO ACTION,
    CONSTRAINT fk_store_images_created_by FOREIGN KEY (created_by)
    REFERENCES public.users (user_no) MATCH SIMPLE
                              ON UPDATE NO ACTION
                              ON DELETE NO ACTION,
    CONSTRAINT fk_store_images_modified_by FOREIGN KEY (modified_by)
    REFERENCES public.users (user_no) MATCH SIMPLE
                              ON UPDATE NO ACTION
                              ON DELETE NO ACTION,
    CONSTRAINT fk_store_images_deleted_by FOREIGN KEY (deleted_by)
    REFERENCES public.users (user_no) MATCH SIMPLE
                              ON UPDATE NO ACTION
                              ON DELETE NO ACTION
    )

    TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.store_images
    OWNER to "user";

-- === Auto-update modified_date triggers ===
DROP TRIGGER IF EXISTS trg_users_set_modified ON public.users;
CREATE TRIGGER trg_users_set_modified
  BEFORE UPDATE ON public.users
  FOR EACH ROW EXECUTE FUNCTION set_modified_at();

DROP TRIGGER IF EXISTS trg_stores_set_modified ON public.stores;
CREATE TRIGGER trg_stores_set_modified
  BEFORE UPDATE ON public.stores
  FOR EACH ROW EXECUTE FUNCTION set_modified_at();

DROP TRIGGER IF EXISTS trg_categories_set_modified ON public.categories;
CREATE TRIGGER trg_categories_set_modified
  BEFORE UPDATE ON public.categories
  FOR EACH ROW EXECUTE FUNCTION set_modified_at();

DROP TRIGGER IF EXISTS trg_products_set_modified ON public.products;
CREATE TRIGGER trg_products_set_modified
  BEFORE UPDATE ON public.products
  FOR EACH ROW EXECUTE FUNCTION set_modified_at();

DROP TRIGGER IF EXISTS trg_orders_set_modified ON public.orders;
CREATE TRIGGER trg_orders_set_modified
  BEFORE UPDATE ON public.orders
  FOR EACH ROW EXECUTE FUNCTION set_modified_at();

DROP TRIGGER IF EXISTS trg_addresses_set_modified ON public.addresses;
CREATE TRIGGER trg_addresses_set_modified
  BEFORE UPDATE ON public.addresses
  FOR EACH ROW EXECUTE FUNCTION set_modified_at();

DROP TRIGGER IF EXISTS trg_deliveries_set_modified ON public.deliveries;
CREATE TRIGGER trg_deliveries_set_modified
  BEFORE UPDATE ON public.deliveries
  FOR EACH ROW EXECUTE FUNCTION set_modified_at();

DROP TRIGGER IF EXISTS trg_reviews_set_modified ON public.reviews;
CREATE TRIGGER trg_reviews_set_modified
  BEFORE UPDATE ON public.reviews
  FOR EACH ROW EXECUTE FUNCTION set_modified_at();

DROP TRIGGER IF EXISTS trg_owner_reviews_set_modified ON public.owner_reviews;
CREATE TRIGGER trg_owner_reviews_set_modified
  BEFORE UPDATE ON public.owner_reviews
  FOR EACH ROW EXECUTE FUNCTION set_modified_at();

DROP TRIGGER IF EXISTS trg_carts_set_modified ON public.carts;
CREATE TRIGGER trg_carts_set_modified
  BEFORE UPDATE ON public.carts
  FOR EACH ROW EXECUTE FUNCTION set_modified_at();

DROP TRIGGER IF EXISTS trg_category_products_set_modified ON public.category_products;
CREATE TRIGGER trg_category_products_set_modified
  BEFORE UPDATE ON public.category_products
  FOR EACH ROW EXECUTE FUNCTION set_modified_at();

DROP TRIGGER IF EXISTS trg_category_stores_set_modified ON public.category_stores;
CREATE TRIGGER trg_category_stores_set_modified
  BEFORE UPDATE ON public.category_stores
  FOR EACH ROW EXECUTE FUNCTION set_modified_at();

DROP TRIGGER IF EXISTS trg_store_images_set_modified ON public.store_images;
CREATE TRIGGER trg_store_images_set_modified
  BEFORE UPDATE ON public.store_images
  FOR EACH ROW EXECUTE FUNCTION set_modified_at();
