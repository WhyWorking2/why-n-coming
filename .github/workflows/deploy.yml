name: PR Build & Deploy to EC2 (deploy branch)

on:
  # ✅ PR 검증: master에서 deploy로 PR 보낼 때 동작
  pull_request:
    branches: [ "deploy" ]
    types: [ opened, synchronize, reopened, ready_for_review ]
  # ✅ 실제 배포: deploy 브랜치에 머지(= push)되면 동작
  push:
    branches: [ "deploy" ]

permissions:
  contents: read
  packages: write
  id-token: write

concurrency:
  group: deploy-branch-deploy
  cancel-in-progress: false

env:
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)
  DOCKER_CONTEXT: ./WhyNComing

jobs:
  # -----------------------------
  # 1) PR 검증(빌드/테스트/도커빌드) — 배포는 안 함
  # -----------------------------
  pr-verify:
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    name: PR Build (deploy target)
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      - name: Gradle build (no test skip)
        working-directory: spring
        run: ./gradlew clean build --no-daemon

      # 선택: 도커 이미지까지 로컬 빌드해 검증(푸시는 안 함)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Docker build (no push)
        uses: docker/build-push-action@v6
        with:
          context: ${{ env.DOCKER_CONTEXT }}
          push: false
          tags: ${{ env.IMAGE_NAME }}:pr-${{ github.event.pull_request.number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # -----------------------------
  # 2) 배포 — deploy 브랜치에 push 시(= 머지 후)만 실행
  #    빌드 & GHCR 푸시 → EC2에 배포
  # -----------------------------
  build-and-push:
    if: ${{ github.event_name == 'push' }}
    runs-on: ubuntu-latest
    name: Build & Push Image (deploy)
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: ${{ env.DOCKER_CONTEXT }}
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    if: ${{ github.event_name == 'push' }}
    needs: build-and-push
    runs-on: ubuntu-latest
    name: Deploy to EC2
    steps:
      - name: SSH to EC2 and deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER || 'ubuntu' }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            set -e
            cd /opt/app
            echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
            docker compose -f docker-compose.prod.yml pull
            docker compose -f docker-compose.prod.yml up -d
            docker image prune -f
